import env
import arcpy
from .create_models import get_layers, map_fields, filter_fields
from glob import glob
from os import getcwd, environ
from os.path import join, basename , isfile
from importlib import import_module
from mako.template import Template
from datetime import datetime
import logging


field_skip_keys = [
    'name',
]

def filter_field_keys(key):
    return key not in field_skip_keys

def find_field(fields, field_name):
    for field in fields:
        if field['name'] == field_name:
            return field

def compare_key(a, b, key):
    a_val = a[key] if key in a else None
    b_val = b[key] if key in b else None 

    return a_val == b_val
    

def compare_models():
    add_fields = []
    remove_fields = []
    update_fields = []

    add_tables = []
    remove_tables = []

    models = [basename(f)[:-3] for f in glob(join(getcwd(), 'models', "*.py")) if isfile(f) and not f.endswith('__init__.py')]
    
    for model in models:
        print('Checking {}'.format(model))
        table = getattr( import_module('models.{}'.format(model)), model)
        table_name = getattr(table, '_name')

        field_names = [f for f in dir(table) if not f.startswith('_')]

        existing_fields = list(filter(filter_fields, map(map_fields, arcpy.ListFields(table_name))))

        # check for new or updated fields
        for field_name in field_names:
            field_obj = getattr(table, field_name)
            field_obj['name'] = field_name
            existing = find_field(existing_fields, field_name)
            if not existing:
                print('Field does not exist yet {}'.format(field_name))
                add_fields.append({'table': table_name, 'field': field_obj})
            else:
                should_update = False
                for key in filter(filter_field_keys, field_obj.keys()):
                    if not compare_key(field_obj, existing, key):
                        print('Key is different: ', key)
                        should_update = True
                if should_update:
                    print('We should update field {}'.format(field_name))
                    update_fields.append({'table': table_name, 'field': field_obj})
                else:
                    print('Field {} is the same'.format(field_name))

        # check for fields that need to be deleted
        for field in existing_fields:
            field_name = field['name']
            try:
                defined_field = getattr(table, field_name)
            except:
                # field doesn't exist
                print('Field should be removed: {}'.format(field_name))
                remove_fields.append({'table': table_name, 'field': field})

    print('Add: ', add_fields, '\nUpdate: ', update_fields, '\nRemove: ', remove_fields)
    return {
        'add_fields': add_fields,
        'update_fields': update_fields,
        'remove_fields': remove_fields,
    }


def generate_migration(name, data={}, template=None):
    """
    Generate a new migrations file. Migrations will be prefixed with a timestamp.
    """


    timestamp = str(datetime.now().timestamp()).replace('.', '_')
    file_name = '{}_{}.py'.format(timestamp, name.replace('.', '_').replace(' ', '_').lower())
    logging.info('generating migration migrations/{}'.format(file_name))

    # get the template content
    if template is None:
        template_path = join(dirname(realpath(__file__)), 'templates', 'migration.py.mako')
        with open(template_path, 'r') as f:
            template = Template(f.read(), strict_undefined=True)

    data['create_date'] = datetime.now().ctime()

    # write it to a migration file
    print('rendering template with data', data)
    with open(join('migrations', file_name), 'w') as f:
        f.write(template.render(**data))

    logging.info('Created new migration file migrations/{}'.format(file_name))
    return file_name

def create_migration():
    migrations = compare_models()
    template = Template(filename='./generator/migration.mako', strict_undefined=True)
    migrations['comment'] = 'This migration was autogenerated by scanning arcpy models and comparing schemas. It should not be modified'
    migrations['author'] =  environ.get('USER') or environ.get('USERNAME')
    generate_migration('Update Migration from arcpy', migrations, template)


if __name__ == '__main__':
    create_migration()